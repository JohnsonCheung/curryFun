/// <reference path="./typings/node/node.d.ts"/>
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const cf = require("./curryfun.js");
//!export
exports.fTstJs_updMainTstIfStmt = (_fTstJs) => exports.fts_updMainTstIfStmt(cf.fTstJs_fts(_fTstJs));
exports.fjs_updFtsMainTstIfStmt = (_fjs) => exports.fts_updMainTstIfStmt(cf.ffnFts(_fjs));
exports.fts_updMainTstIfStmt = (_fts) => {
    // assume: [ module.id | function tst__* ]
    // aim:    [ upd module.id ]
    // assume[module.id]: each fts (*.ts-file), there is a statement of
    //       : if(module.id==='.') {
    //       : ..           <-- {context}
    //       : }
    // assume[function tst__*]: each fts, there are some /^function (tst__[\w$0-0_])\(\)/
    // aim:[upd module.id]: update the {context} by list of tst__xxxx
    const oldLines = cf.ftLines(_fts);
    const newLines = exports.xn_newLines(oldLines);
    if (newLines !== null && newLines !== oldLines) {
        //cf.ffnMakBackup(_fts)
        cf.sWrt(_fts)(newLines);
    }
};
//!lib ===========
exports.funLin_funNm = (_funLin) => {
    const m0 = _funLin.match(cf.reExpConstNm);
    if (m0 !== null)
        return m0[1];
    const m1 = _funLin.match(cf.reConstNm);
    if (m1 !== null)
        return m1[1];
    cf.er('Given _funLin is not a function-line', { _funLin });
    return '';
};
exports.funLin_part2 = (_funLin) => {
    const a0 = cf.sRmvPfx('export ')(_funLin);
    const a1 = cf.sRmvPfx('const ')(a0);
    const a2 = cf.sRmvFstTerm(a1);
    return ' // ' + a2;
};
exports.srcLy_funLy = (_src) => cf.itrWhere(exports.lin_isFunLin)(_src);
exports.lin_isFunLin = (_lin) => {
    const z = cf.reConstNm.test(_lin) || cf.reExpConstNm.test(_lin);
    //    if(cf.sHasPfx('const')(_lin)) {
    //        console.log(z,_lin)
    //    }
    return z;
};
//!x
exports.xn_newLines = (newLines) => {
    const ly = cf.sSplitLines(newLines);
    const ix1 = exports.x1_ix1(ly);
    const ix2 = exports.x2_ix2(ly, ix1);
    if (ix1 === null || ix2 === null)
        return null;
    const p1 = exports.xn1_part1(ly, ix1);
    const p2 = exports.xn2_part2(ly, ix1, ix2);
    const p3 = exports.xn3_part3(ly, ix2);
    return p1 + '\r\n' + p2 + '\r\n' + p3;
};
exports.x1e_eq = cf.vEQ("if (module.id === '.') {");
exports.x1_ix1 = (ly) => cf.ayFindIx(exports.x1e_eq)(ly);
exports.x2_ix2 = (ly, ix1) => {
    if (ix1 === null)
        return null;
    for (let ix = ix1 + 1; ix < ly.length; ix++) {
        if (ly[ix] === '}')
            return ix;
    }
    return null;
};
exports.xn1_part1 = (ly, ix1) => ly.slice(0, ix1 + 1).join('\r\n');
exports.xn2_part2 = (ly, ix1, ix2) => {
    const tstNy = exports.xn2t_srtedTstFunNy(ly);
    const funLy = exports.xn2f_srtedFunLy(ly);
    const t1 = cf.itrAddPfxSfx('    ', '()')(tstNy);
    const f1 = cf.itrAddPfx('    ')(funLy);
    const n = t1.concat(f1);
    return n.join('\r\n');
};
exports.xn2tsn_nLvl = (ny) => cf.itrMax(cf.itrMap(exports.y_nm_lvlI)(ny));
exports.xn2tsli_isLvlINm = (_lvlI) => (_tstFunNm) => {
    const nm = cf.sRmvPfx('tst__')(_tstFunNm);
    const lvlI = exports.y_nm_lvlI(nm);
    const z = lvlI === _lvlI;
    return z;
};
exports.xn2tsl_lvlINy = (lvlI, ny) => cf.itrWhere(exports.xn2tsli_isLvlINm(lvlI))(ny).sort();
exports.xn3_part3 = (ly, ix2) => ly.slice(ix2).join('\r\n');
exports.xn2ts_srtedTstFunNy = (_tstFunNy) => {
    const ny = cf.itrMap(cf.sRmvPfx("tst__"))(_tstFunNy);
    const n0 = exports.xn2tsn_nLvl(ny);
    const n = cf.vDft(0)(n0);
    let o = [];
    for (let lvlI = n; lvlI >= -1; lvlI--) {
        const m = exports.xn2tsl_lvlINy(lvlI, _tstFunNy);
        o = o.concat(m);
    }
    if (_tstFunNy.length !== o.length) {
        debugger;
        cf.er('_ny.length should = o.length', { _tstFunNy, o });
    }
    return o;
};
exports.xn2t_srtedTstFunNy = (_ly) => {
    const ny = cf.srcCol(/^function (tst__[$a-zA-Z][$_0-9a-zA-Z]*)\(\)/)(_ly);
    return exports.xn2ts_srtedTstFunNy(ny);
};
exports.xn2f_srtedFunLy = (_srcLy) => {
    const v1 = false;
    if (v1)
        return exports.xn2fn_srtedFunNy(_srcLy);
    return exports.xn2fl_srtedFunLy(_srcLy);
};
exports.xn2fl_srtedFunLy = (_srcLy) => {
    const funLy = exports.srcLy_funLy(_srcLy);
    const funNy = cf.itrMap(exports.funLin_funNm)(funLy);
    const part2Ay = cf.itrMap(exports.funLin_part2)(funLy);
    const funNy1 = cf.itrAlignL(funNy);
    const lin = i => funNy1[i] + part2Ay[i];
    const ly = cf.itrMap(lin)(cf.nItr(funNy.length));
    return ly.sort(exports.y_funNmCmpr);
};
exports.xn2fdbf_funNm = (_lin) => {
    const m = _lin.match(cf.reConstNm);
    if (m === null)
        return '';
    return m[1];
};
exports.xn2fdbr_rmk = (_lin) => {
    const m = _lin.match(/\/\/(.*)$/);
    if (m === null)
        return '';
    return m[1].trim();
};
exports.xn2fdb_brk = (_lin) => {
    const funNm = exports.xn2fdbf_funNm(_lin);
    const rmk = exports.xn2fdbr_rmk(_lin);
    return [funNm, rmk];
};
exports.xn2fn_srtedFunNy = (_ly) => {
    const n1 = cf.srcExpConstNy(_ly);
    const n2 = cf.srcConstNy(_ly);
    return n1.concat(n2).sort(exports.y_funNmCmpr);
};
//!y ====================
exports.y_funNmCmpr = (a, b) => cf.vvCompare(a.replace(/\_/g, ' '), b.replace(/\_/g, ' '));
exports.y_nm_lvlI = (nm) => {
    const c0 = nm[0];
    if (c0 !== 'x' && c0 !== 'y')
        return -1;
    const ix = nm.indexOf("_");
    if (ix === -1)
        return -1;
    return ix - 1;
};
//# sourceMappingURL=data:application/json;base64,