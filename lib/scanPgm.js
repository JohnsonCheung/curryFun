/// <reference path="./typings/node/node.d.ts"/>
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const cf = require("./curryfun.js");
const { pipe, rmvEmp, map } = cf;
//!export
exports.fjs_updMainTstIfStmt = (_fjs) => {
    const fTstJs = '';
    const fjs = '';
    x(fTstJs, fjs);
};
exports.fTstJs_updMainTstIfStmt = (_fTstJs) => {
    const fTstJs = '';
    const fjs = '';
    x(fTstJs, fjs);
};
//!x
const x = (_fTstJs, _fjs) => {
    // assume: [ module.id | function tst__* ]
    // aim:    [ upd module.id ]
    // assume[module.id]: each fts (*.ts-file), there is a statement of
    //       : if(module.id==='.') {
    //       : ..           <-- {context}
    //       : }
    // assume[function tst__*]: each fts, there are some /^function (tst__[\w$0-0_])\(\)/
    // aim:[upd module.id]: update the {context} by list of tst__xxxx
    const oldLines = cf.ftLines(_fts);
    const newLines = exports.xn_newLines(oldLines);
    const fTstTs = '';
    if (newLines !== null && newLines !== oldLines) {
        //cf.ffnMakBackup(_fts)
        cf.sWrt(fTstTs)(newLines);
    }
};
exports.xn_newLines = (newLines) => {
    const ly = cf.sSplitLines(newLines);
    const ix1 = exports.x1_ix1(ly);
    const ix2 = exports.x2_ix2(ly, ix1);
    if (ix1 === null || ix2 === null)
        return null;
    const p1 = exports.xn1_part1(ly, ix1);
    const p2 = exports.xn2_part2(tstSrc, ix1, ix2, src);
    const p3 = exports.xn3_part3(ly, ix2);
    return p1 + '\r\n' + p2 + '\r\n' + p3;
};
exports.x1e_eq = cf.vEQ("if (module.id === '.') {");
exports.x1_ix1 = (ly) => cf.ayFindIx(exports.x1e_eq)(ly);
exports.x2_ix2 = (ly, ix1) => {
    if (ix1 === null)
        return null;
    for (let ix = ix1 + 1; ix < ly.length; ix++) {
        if (ly[ix] === '}')
            return ix;
    }
    return null;
};
exports.xn1_part1 = (_src, ix1) => _src.slice(0, ix1 + 1).join('\r\n');
exports.xn2_part2 = (_tstSrc, ix1, ix2, _src) => {
    const tstNy = exports.tstSrc_srtedTstFunNy(_tstSrc);
    const expConstLy = exports.src_srtedExpConstLy(_src);
    const t1 = cf.itrAddPfxSfx('    ', '()')(tstNy);
    const f1 = cf.itrAddPfx('    ')(expConstLy);
    const n = t1.concat(f1);
    return n.join('\r\n');
};
exports.xn3_part3 = (ly, ix2) => ly.slice(ix2).join('\r\n');
exports.xn2fdbf_funNm = (_lin) => {
    const m = _lin.match(cf.reConstNm);
    if (m === null)
        return '';
    return m[1];
};
exports.xn2fdb_brk = (_lin) => {
    const funNm = exports.xn2fdbf_funNm(_lin);
    const rmk = exports.srcLin_rmk(_lin);
    return [funNm, rmk];
};
//!lib ===========
exports.tstSrc_srtedTstFunNy = yA;
exports.srcLin_rmk = (_lin) => {
    const m = _lin.match(/\/\/(.*)$/);
    if (m === null)
        return '';
    return m[1].trim();
};
exports.funNmCmpr = (a, b) => cf.vvCompare(a.replace(/\_/g, ' '), b.replace(/\_/g, ' '));
exports.funNm_lvlNo = (nm) => {
    const c0 = nm[0];
    if (c0 !== 'x' && c0 !== 'y')
        return -1;
    const ix = nm.indexOf("_");
    if (ix === -1)
        return -1;
    return ix - 1;
};
exports.src_expCOnstNy = (_src) => pipe(_src)(map(exports.lin_expConstNm), rmvEmp);
exports.lin_expConstNm = (_lin) => {
    const m = _lin.match(cf.reExpConstNm);
    return (m === null)
        ? null
        : m[1];
};
exports.expConstLin_constNm = (_expConstLin) => {
    const m0 = _expConstLin.match(cf.reExpConstNm);
    if (m0 !== null)
        return m0[1];
    const m1 = _expConstLin.match(cf.reConstNm);
    if (m1 !== null)
        return m1[1];
    cf.er('Given _funLin is not a function-line', { _expConstLin });
    return '';
};
exports.expConstLin_fmtLinPart2 = (_expConstin) => {
    const a0 = cf.sRmvPfx('export ')(_expConstin);
    const a1 = cf.sRmvPfx('const ')(a0);
    const a2 = cf.sRmvFstTerm(a1);
    return (a2 === '')
        ? ''
        : ' // ' + a2;
};
exports.src_expConstLy = (_src) => cf.itrWhere(exports.lin_isExpConstLin)(_src);
exports.lin_isExpConstLin = (_lin) => cf.reExpConstNm.test(_lin);
exports.src_srtedExpConstLy = (_src) => {
    const a = () => cf.srcExpConstNy(_src).sort(exports.funNmCmpr);
    const b = () => {
        const expConstLy = exports.src_expConstLy(_src);
        const expConstNy = cf.pipe(expConstLy)(cf.itrMap(exports.lin_expConstNm), cf.itrRmvEmp);
        const part2Ay = cf.itrMap(exports.expConstLin_fmtLinPart2)(expConstLy);
        const expConstNy1 = cf.itrAlignL(expConstNy);
        const lin = i => expConstNy1[i] + part2Ay[i];
        const ly = cf.itrMap(lin)(cf.nItr(expConstNy.length));
        return ly.sort(exports.funNmCmpr);
    };
    return true
        ? a()
        : b();
};
//!y ====================
exports.yAn_nLvl = (ny) => cf.itrMax(cf.itrMap(exports.funNm_lvlNo)(ny));
exports.yAli_isLvlINm = (_lvlI) => (_tstFunNm) => {
    const nm = cf.sRmvPfx('tst__')(_tstFunNm);
    const lvlI = exports.funNm_lvlNo(nm);
    const z = lvlI === _lvlI;
    return z;
};
exports.yAl_lvlINy = (lvlI, ny) => cf.itrWhere(exports.yAli_isLvlINm(lvlI))(ny).sort();
function yA(_tstSrc) {
    exports.tstSrc_srtedTstFunNy;
    const ny0 = cf.srcCol(/^function (tst__[$a-zA-Z][$_0-9a-zA-Z]*)\(\)/)(_tstSrc);
    const ny = cf.itrMap(cf.sRmvPfx("tst__"))(ny0);
    const n0 = exports.yAn_nLvl(ny);
    const n = cf.vDft(0)(n0);
    let o = [];
    for (let lvlI = n; lvlI >= -1; lvlI--) {
        const m = exports.yAl_lvlINy(lvlI, ny);
        o = o.concat(m);
    }
    if (ny.length !== o.length) {
        debugger;
        cf.er('ny.length should = o.length', { ny, o });
    }
    return o;
}
exports.yA = yA;
//# sourceMappingURL=data:application/json;base64,