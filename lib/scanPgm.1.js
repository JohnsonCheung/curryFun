/// <reference path="./typings/node/node.d.ts"/>
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const cf = require("./curryfun.js");
const { ftLy, pipe, rmvEmp, map } = cf;
//!export
exports.fjs_updMainTstIfStmt = (_fjs) => {
    const fTstJs = '';
    const fjs = '';
    exports.x(fTstJs, fjs);
};
exports.fTstJs_updMainTstIfStmt = (_fTstJs) => {
    const fTstJs = '';
    const fjs = '';
    exports.x(fTstJs, fjs);
};
//!x
exports.x = (_fTstTs, _fts) => {
    // assume: [ module.id | function tst__* ]
    // aim:    [ upd module.id ]
    // assume[module.id]: each fts (*.ts-file), there is a statement of
    //       : if(module.id==='.') {
    //       : ..           <-- {context}
    //       : }
    // assume[function tst__*]: each fts, there are some /^function (tst__[\w$0-0_])\(\)/
    // aim:[upd module.id]: update the {context} by list of tst__xxxx
    const tstSrc = ftLy(_fTstTs);
    const eq = cf.vEQ("if (module.id === '.') {");
    const ix1Opt = cf.ayFindIx(eq)(tstSrc);
    if (ix1Opt === null)
        return;
    const ix1 = ix1Opt;
    const ix2Opt = (() => {
        for (let ix = ix1 + 1; ix < tstSrc.length; ix++) {
            if (tstSrc[ix] === '}')
                return ix;
        }
        return null;
    })();
    if (ix2Opt === null)
        return;
    const ix2 = ix2Opt;
    const p1 = tstSrc.slice(0, ix1 + 1).join('\r\n');
    const tstNy = (() => {
        const ny0 = cf.srcCol(/^function (tst__[$a-zA-Z][$_0-9a-zA-Z]*)\(\)/)(tstSrc);
        const ny = cf.itrMap(cf.sRmvPfx("tst__"))(ny0);
        return ny;
    })();
    const nTstFunLvlOpt = cf.itrMax(cf.itrMap(exports.funNm_lvlNo)(tstNy));
    const nTstFunLvl = cf.vDft(0)(nTstFunLvlOpt);
    const srtedTstNy = (() => {
        let o = [];
        for (let lvlI = nTstFunLvl; lvlI >= -1; lvlI--) {
            const m = exports.yAl_lvlINy(lvlI, tstNy);
            o = o.concat(m);
        }
        if (tstNy.length !== o.length) {
            debugger;
            cf.er('ny.length should = o.length', { tstNy, o });
        }
        return o;
    })();
    const src = (_fTstTs === _fts) ? tstSrc : ftLy(_fts);
    const expConstLy = exports.src_srtedExpConstLy(src);
    const p2_tstFunLy = cf.itrAddPfxSfx('    ', '()')(srtedTstNy).join('\r\n') + '\r\n';
    const p2_funLy = cf.itrAddPfx('    ')(expConstLy).join('\r\n') + '\r\n';
    const p2 = p2_tstFunLy + p2_funLy;
    const p3 = ix2 === null ? '' : tstSrc.slice(ix2).join('\r\n');
    const newLines = p1 + p2 + p3;
    {
        const newLy = newLines.split('\r\n');
        cf.oBrw({ newLy });
    }
    debugger;
    const oldLines = tstSrc.join('\r\n');
    if (newLines !== '' && newLines !== oldLines) {
        //cf.ffnMakBackup(_fts)
        cf.sWrt(_fTstTs)(newLines);
    }
};
exports.xn2fdbf_funNm = (_lin) => {
    const m = _lin.match(cf.reConstNm);
    if (m === null)
        return '';
    return m[1];
};
exports.xn2fdb_brk = (_lin) => {
    const funNm = exports.xn2fdbf_funNm(_lin);
    const rmk = exports.srcLin_rmk(_lin);
    return [funNm, rmk];
};
//!lib ===========
exports.srcLin_rmk = (_lin) => {
    const m = _lin.match(/\/\/(.*)$/);
    if (m === null)
        return '';
    return m[1].trim();
};
exports.funNmCmpr = (a, b) => cf.vvCompare(a.replace(/\_/g, ' '), b.replace(/\_/g, ' '));
exports.funNm_lvlNo = (nm) => {
    const c0 = nm[0];
    if (c0 !== 'x' && c0 !== 'y')
        return -1;
    const ix = nm.indexOf("_");
    if (ix === -1)
        return -1;
    return ix - 1;
};
exports.src_expCOnstNy = (_src) => pipe(_src)(map(exports.lin_expConstNm), rmvEmp);
exports.lin_expConstNm = (_lin) => {
    const m = _lin.match(cf.reExpConstNm);
    return (m === null)
        ? null
        : m[1];
};
exports.expConstLin_constNm = (_expConstLin) => {
    const m0 = _expConstLin.match(cf.reExpConstNm);
    if (m0 !== null)
        return m0[1];
    const m1 = _expConstLin.match(cf.reConstNm);
    if (m1 !== null)
        return m1[1];
    cf.er('Given _funLin is not a function-line', { _expConstLin });
    return '';
};
exports.expConstLin_fmtLinPart2 = (_expConstin) => {
    const a0 = cf.sRmvPfx('export ')(_expConstin);
    const a1 = cf.sRmvPfx('const ')(a0);
    const a2 = cf.sRmvFstTerm(a1);
    return (a2 === '')
        ? ''
        : ' // ' + a2;
};
exports.src_expConstLy = (_src) => cf.itrWhere(exports.lin_isExpConstLin)(_src);
exports.lin_isExpConstLin = (_lin) => cf.reExpConstNm.test(_lin);
exports.src_srtedExpConstLy = (_src) => {
    const a = () => cf.srcExpConstNy(_src).sort(exports.funNmCmpr);
    const b = () => {
        const expConstLy = exports.src_expConstLy(_src);
        const expConstNy = cf.pipe(expConstLy)(cf.itrMap(exports.lin_expConstNm), cf.itrRmvEmp);
        const part2Ay = cf.itrMap(exports.expConstLin_fmtLinPart2)(expConstLy);
        const expConstNy1 = cf.itrAlignL(expConstNy);
        const lin = i => expConstNy1[i] + part2Ay[i];
        const ly = cf.itrMap(lin)(cf.nItr(expConstNy.length));
        return ly.sort(exports.funNmCmpr);
    };
    return true
        ? a()
        : b();
};
//!y ====================
exports.yAli_isLvlINm = (_lvlI) => (_tstFunNm) => {
    const nm = cf.sRmvPfx('tst__')(_tstFunNm);
    const lvlI = exports.funNm_lvlNo(nm);
    const z = lvlI === _lvlI;
    return z;
};
exports.yAl_lvlINy = (lvlI, ny) => cf.itrWhere(exports.yAli_isLvlINm(lvlI))(ny).sort();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhblBnbS4xLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2NhblBnbS4xLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdEQUFnRDtBQUNoRCxZQUFZLENBQUE7O0FBQ1osb0NBQW1DO0FBRW5DLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUE7QUFDdEMsU0FBUztBQUNJLFFBQUEsb0JBQW9CLEdBQUcsQ0FBQyxJQUFTLEVBQVEsRUFBRTtJQUNwRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUE7SUFDakIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0lBQ2QsU0FBQyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUNsQixDQUFDLENBQUE7QUFDWSxRQUFBLHVCQUF1QixHQUFHLENBQUMsT0FBZSxFQUFRLEVBQUU7SUFDN0QsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFBO0lBQ2pCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQTtJQUNkLFNBQUMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFDbEIsQ0FBQyxDQUFBO0FBQ0QsSUFBSTtBQUNTLFFBQUEsQ0FBQyxHQUFHLENBQUMsT0FBZSxFQUFFLElBQVMsRUFBUSxFQUFFO0lBQ2xELDBDQUEwQztJQUMxQyw0QkFBNEI7SUFDNUIsbUVBQW1FO0lBQ25FLGdDQUFnQztJQUNoQyxxQ0FBcUM7SUFDckMsWUFBWTtJQUNaLHFGQUFxRjtJQUNyRixpRUFBaUU7SUFDakUsTUFBTSxNQUFNLEdBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2pDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtJQUM3QyxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ2hELEVBQUUsQ0FBQyxDQUFD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QUksQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUE7SUFDOUUsTUFBTSxFQUFFLEdBQVUsV0FBVyxHQUFHLFFBQVEsQ0FBQTtJQUN4QyxNQUFNLEVBQUUsR0FBVSxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3BFLE1BQU0sUUFBUSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBQzdCLENBQUM7UUFDRyxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3BDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO0lBQ3RCLENBQUM7SUFDRCxRQUFRLENBQUE7SUFDUixNQUFNLFFBQVEsR0FBVSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzNDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxFQUFFLElBQUksUUFBUSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDM0MsdUJBQXVCO1FBQ3ZCLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDOUIsQ0FBQztBQUNMLENBQUMsQ0FBQTtBQUNZLFFBQUEsYUFBYSxHQUFHLENBQUMsSUFBUyxFQUFNLEVBQUU7SUFDM0MsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQztRQUNYLE1BQU0sQ0FBQyxFQUFFLENBQUE7SUFDYixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2YsQ0FBQyxDQUFBO0FBQ1ksUUFBQSxVQUFVLEdBQUcsQ0FBQyxJQUFTLEVBQVUsRUFBRTtJQUM1QyxNQUFNLEtB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UUFDNUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzVDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtRQUNyRCxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBUyxDQUFDLENBQUE7SUFDN0IsQ0FBQyxDQUFBO0lBRUQsTUFBTSxDQUFDLElBQUk7UUFDUCxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ0wsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0FBQ2IsQ0FBQyxDQUFBO0FBQ0QseUJBQXlCO0FBQ1osUUFBQSxhQUFhLEdBQUcsQ0FBQyxLQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBYSxFQUFLLEVBQUU7SUFDNUQsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUN6QyxNQUFNLElBQUksR0FBRyxtQkFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQzVCLE1BQU0sQ0FBQyxHQUFHLElBQUksS0FBSyxLQUFLLENBQUE7SUFDeEIsTUFBTSxDQUFDLENBQUMsQ0FBQTtBQUNaLENBQUMsQ0FBQTtBQUNZLFFBQUEsVUFBVSxHQUFHLENBQUMsSUFBTyxFQUFFLEVBQU0sRUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxxQkFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi90eXBpbmdzL25vZGUvbm9kZS5kLnRzXCIvPlxyXG4ndXNlIHN0cmljdCdcclxuaW1wb3J0ICogYXMgY2YgZnJvbSAnLi9jdXJyeWZ1bi5qcydcclxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnXHJcbmNvbnN0IHsgZnRMeSwgcGlwZSwgcm12RW1wLCBtYXAgfSA9IGNmXHJcbi8vIWV4cG9ydFxyXG5leHBvcnQgY29uc3QgZmpzX3VwZE1haW5Uc3RJZlN0bXQgPSAoX2ZqczogZmpzKTogdm9pZCA9PiB7XHJcbiAgICBjb25zdCBmVHN0SnMgPSAnJ1xyXG4gICAgY29uc3QgZmpzID0gJydcclxuICAgIHgoZlRzdEpzLCBmanMpXHJcbn1cclxuZXhwb3J0IGNvbnN0IGZUc3RKc191cGRNYWluVHN0SWZTdG10ID0gKF9mVHN0SnM6IGZUc3RKcyk6IHZvaWQgPT4ge1xyXG4gICAgY29uc3QgZlRzdEpzID0gJydcclxuICAgIGNvbnN0IGZqcyA9ICcnXHJcbiAgICB4KGZUc3RKcywgZmpzKVxyXG59XHJcbi8vIXhcclxuZXhwb3J0IGNvbnN0IHggPSAoX2ZUc3RUczogZlRzdFRzLCBfZnRzOiBmdHMpOiB2b2lkID0+IHtcclxuICAgIC8vIGFzc3VtZTogWyBtb2R1bGUuaWQgfCBmdW5jdGlvbiB0c3RfXyogXVxyXG4gICAgLy8gYWltOiAgICBbIHVwZCBtb2R1bGUuaWQgXVxyXG4gICAgLy8gYXNzdW1lW21vZHVsZS5pZF06IGVhY2ggZnRzICgqLnRzLWZpbGUpLCB0aGVyZSBpcyBhIHN0YXRlbWVudCBvZlxyXG4gICAgLy8gICAgICAgOiBpZihtb2R1bGUuaWQ9PT0nLicpIHtcclxuICAgIC8vICAgICAgIDogLi4gICAgICAgICAgIDwtLSB7Y29udGV4dH1cclxuICAgIC8vICAgICAgIDogfVxyXG4gICAgLy8gYXNzdW1lW2Z1bmN0aW9uIHRzdF9fKl06IGVhY2ggZnRzLCB0aGVyZSBhcmUgc29tZSAvXmZ1bmN0aW9uICh0c3RfX1tcXHckMC0wX10pXFwoXFwpL1xyXG4gICAgLy8gYWltOlt1cGQgbW9kdWxlLmlkXTogdXBkYXRlIHRoZSB7Y29udGV4dH0gYnkgbGlzdCBvZiB0c3RfX3h4eHhcclxuICAgIGNvbnN0IHRzdFNyYzogc3JjID0gZnRMeShfZlRzdFRzKVxyXG4gICAgY29uc3QgZXEgPSBjZi52RVEoXCJpZiAobW9kdWxlLmlkID09PSAnLicpIHtcIilcclxuICAgIGNvbnN0IGl4MU9wdDogbiB8IG51bGwgPSBjZi5heUZpbmRJeChlcSkodHN0U3JjKVxyXG4gICAgaWYgKGl4MU9wdCA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm5cclxuICAgIGNvbnN0IGl4MSA9IGl4MU9wdFxyXG4gICAgY29uc3QgaXgyT3B0OiBuIHwgbnVsbCA9ICgoKSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgaXggPSBpeDEgKyAxOyBpeCA8IHRzdFNyYy5sZW5ndGg7IGl4KyspIHtcclxuICAgICAgICAgICAgaWYgKHRzdFNyY1tpeF0gPT09ICd9JylcclxuICAgICAgICAgICAgICAgIHJldHVybiBpeFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgfSkoKVxyXG4gICAgaWYgKGl4Mk9wdCA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm5cclxuICAgIGNvbnN0IGl4MjogbiA9IGl4Mk9wdFxyXG4gICAgY29uc3QgcDE6IGxpbmVzID0gdHN0U3JjLnNsaWNlKDAsIGl4MSArIDEpLmpvaW4oJ1xcclxcbicpXHJcbiAgICBjb25zdCB0c3ROeTogbnkgPSAoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG55MCA9IGNmLnNyY0NvbCgvXmZ1bmN0aW9uICh0c3RfX1skYS16QS1aXVskXzAtOWEtekEtWl0qKVxcKFxcKS8pKHRzdFNyYylcclxuICAgICAgICBjb25zdCBueSA9IGNmLml0ck1hcChjZi5zUm12UGZ4KFwidHN0X19cIikpKG55MClcclxuICAgICAgICByZXR1cm4gbnlcclxuICAgIH0pKClcclxuICAgIGNvbnN0IG5Uc3RGdW5MdmxPcHQ6IG4gfCBudWxsID0gY2YuaXRyTWF4KGNmLml0ck1hcChmdW5ObV9sdmxObykodHN0TnkpKVxyXG4gICAgY29uc3QgblRzdEZ1bkx2bDogbiA9IGNmLnZEZnQoMCkoblRzdEZ1bkx2bE9wdClcclxuICAgIGNvbnN0IHNydGVkVHN0Tnk6IG55ID0gKCgpID0+IHtcclxuICAgICAgICBsZXQgbzogbnkgPSBbXVxyXG4gICAgICAgIGZvciAobGV0IGx2bEkgPSBuVHN0RnVuTHZsOyBsdmxJID49IC0xOyBsdmxJLS0pIHtcclxuICAgICAgICAgICAgY29uc3QgbSA9IHlBbF9sdmxJTnkobHZsSSwgdHN0TnkpXHJcbiAgICAgICAgICAgIG8gPSBvLmNvbmNhdChtKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHN0TnkubGVuZ3RoICE9PSBvLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBkZWJ1Z2dlclxyXG4gICAgICAgICAgICBjZi5lcignbnkubGVuZ3RoIHNob3VsZCA9IG8ubGVuZ3RoJywgeyB0c3ROeSwgbyB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb1xyXG4gICAgfSkoKVxyXG4gICAgY29uc3Qgc3JjOiBzcmMgPSAoX2ZUc3RUcyA9PT0gX2Z0cykgPyB0c3RTcmMgOiBmdEx5KF9mdHMpXHJcbiAgICBjb25zdCBleHBDb25zdEx5ID0gc3JjX3NydGVkRXhwQ29uc3RMeShzcmMpXHJcbiAgICBjb25zdCBwMl90c3RGdW5MeTogbGluZXMgPSBjZi5pdHJBZGRQZnhTZngoJyAgICAnLCAnKCknKShzcnRlZFRzdE55KS5qb2luKCdcXHJcXG4nKSArICdcXHJcXG4nXHJcbiAgICBjb25zdCBwMl9mdW5MeTogbGluZXMgPSBjZi5pdHJBZGRQZngoJyAgICAnKShleHBDb25zdEx5KS5qb2luKCdcXHJcXG4nKSArICdcXHJcXG4nXHJcbiAgICBjb25zdCBwMjogbGluZXMgPSBwMl90c3RGdW5MeSArIHAyX2Z1bkx5XHJcbiAgICBjb25zdCBwMzogbGluZXMgPSBpeDIgPT09IG51bGwgPyAnJyA6IHRzdFNyYy5zbGljZShpeDIpLmpvaW4oJ1xcclxcbicpXHJcbiAgICBjb25zdCBuZXdMaW5lcyA9IHAxICsgcDIgKyBwM1xyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IG5ld0x5ID0gbmV3TGluZXMuc3BsaXQoJ1xcclxcbicpXHJcbiAgICAgICAgY2Yub0Jydyh7IG5ld0x5IH0pXHJcbiAgICB9XHJcbiAgICBkZWJ1Z2dlclxyXG4gICAgY29uc3Qgb2xkTGluZXM6IGxpbmVzID0gdHN0U3JjLmpvaW4oJ1xcclxcbicpXHJcbiAgICBpZiAobmV3TGluZXMgIT09ICcnICYmIG5ld0xpbmVzICE9PSBvbGRMaW5lcykge1xyXG4gICAgICAgIC8vY2YuZmZuTWFrQmFja3VwKF9mdHMpXHJcbiAgICAgICAgY2Yuc1dydChfZlRzdFRzKShuZXdMaW5lcylcclxuICAgIH1cclxufVxyXG5leHBvcnQgY29uc3QgeG4yZmRiZl9mdW5ObSA9IChfbGluOiBsaW4pOiBubSA9PiB7XHJcbiAgICBjb25zdCBtID0gX2xpbi5tYXRjaChjZi5yZUNvbnN0Tm0pXHJcbiAgICBpZiAobSA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm4gJydcclxuICAgIHJldHVybiBtWzFdXHJcbn1cclxuZXhwb3J0IGNvbnN0IHhuMmZkYl9icmsgPSAoX2xpbjogbGluKTogW3MsIHNdID0+IHtcclxuICAgIGNvbnN0IGZ1bk5tID0geG4yZmRiZl9mdW5ObShfbGluKVxyXG4gICAgY29uc3Qgcm1rID0gc3JjTGluX3JtayhfbGluKVxyXG4gICAgcmV0dXJuIFtmdW5ObSwgcm1rXVxyXG59XHJcbi8vIWxpYiA9PT09PT09PT09PVxyXG5leHBvcnQgY29uc3Qgc3JjTGluX3JtayA9IChfbGluOiBsaW4pOiBzID0+IHtcclxuICAgIGNvbnN0IG0gPSBfbGluLm1hdGNoKC9cXC9cXC8oLiopJC8pXHJcbiAgICBpZiAobSA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm4gJydcclxuICAgIHJldHVybiBtWzFdLnRyaW0oKVxyXG59XHJcbmV4cG9ydCBjb25zdCBmdW5ObUNtcHIgPSAoYTogcywgYjogcykgPT4gY2YudnZDb21wYXJlKGEucmVwbGFjZSgvXFxfL2csICcgJyksIGIucmVwbGFjZSgvXFxfL2csICcgJykpXHJcbmV4cG9ydCBjb25zdCBmdW5ObV9sdmxObyA9IChubTogbm0pID0+IHtcclxuICAgIGNvbnN0IGMwID0gbm1bMF1cclxuICAgIGlmIChjMCAhPT0gJ3gnICYmIGMwICE9PSAneScpXHJcbiAgICAgICAgcmV0dXJuIC0xXHJcbiAgICBjb25zdCBpeCA9IG5tLmluZGV4T2YoXCJfXCIpXHJcbiAgICBpZiAoaXggPT09IC0xKVxyXG4gICAgICAgIHJldHVybiAtMVxyXG4gICAgcmV0dXJuIGl4IC0gMVxyXG59XHJcbmV4cG9ydCBjb25zdCBzcmNfZXhwQ09uc3ROeSA9IChfc3JjOiBzcmMpOiBueSA9PiBwaXBlKF9zcmMpKG1hcChsaW5fZXhwQ29uc3RObSksIHJtdkVtcClcclxuZXhwb3J0IGNvbnN0IGxpbl9leHBDb25zdE5tID0gKF9saW46IGxpbik6IG5tIHwgbnVsbCA9PiB7XHJcbiAgICBjb25zdCBtID0gX2xpbi5tYXRjaChjZi5yZUV4cENvbnN0Tm0pXHJcbiAgICByZXR1cm4gKG0gPT09IG51bGwpXHJcbiAgICAgICAgPyBudWxsXHJcbiAgICAgICAgOiBtWzFdXHJcbn1cclxuZXhwb3J0IGNvbnN0IGV4cENvbnN0TGluX2NvbnN0Tm0gPSAoX2V4cENvbnN0TGluOiBsaW4pOiBubSA9PiB7XHJcbiAgICBjb25zdCBtMCA9IF9leHBDb25zdExpbi5tYXRjaChjZi5yZUV4cENvbnN0Tm0pXHJcbiAgICBpZiAobTAgIT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIG0wWzFdXHJcbiAgICBjb25zdCBtMSA9IF9leHBDb25zdExpbi5tYXRjaChjZi5yZUNvbnN0Tm0pXHJcbiAgICBpZiAobTEgIT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIG0xWzFdXHJcbiAgICBjZi5lcignR2l2ZW4gX2Z1bkxpbiBpcyBub3QgYSBmdW5jdGlvbi1saW5lJywgeyBfZXhwQ29uc3RMaW4gfSlcclxuICAgIHJldHVybiAnJ1xyXG59XHJcbmV4cG9ydCBjb25zdCBleHBDb25zdExpbl9mbXRMaW5QYXJ0MiA9IChfZXhwQ29uc3RpbjogbGluKTogcyA9PiB7XHJcbiAgICBjb25zdCBhMCA9IGNmLnNSbXZQZngoJ2V4cG9ydCAnKShfZXhwQ29uc3RpbilcclxuICAgIGNvbnN0IGExID0gY2Yuc1JtdlBmeCgnY29uc3QgJykoYTApXHJcbiAgICBjb25zdCBhMiA9IGNmLnNSbXZGc3RUZXJtKGExKVxyXG4gICAgcmV0dXJuIChhMiA9PT0gJycpXHJcbiAgICAgICAgPyAnJ1xyXG4gICAgICAgIDogJyAvLyAnICsgYTJcclxufVxyXG5leHBvcnQgY29uc3Qgc3JjX2V4cENvbnN0THkgPSAoX3NyYzogc3JjKTogbHkgPT4gY2YuaXRyV2hlcmUobGluX2lzRXhwQ29uc3RMaW4pKF9zcmMpXHJcbmV4cG9ydCBjb25zdCBsaW5faXNFeHBDb25zdExpbiA9IChfbGluOiBsaW4pOiBiID0+IGNmLnJlRXhwQ29uc3RObS50ZXN0KF9saW4pXHJcbmV4cG9ydCBjb25zdCBzcmNfc3J0ZWRFeHBDb25zdEx5ID0gKF9zcmM6IHNyYyk6IGx5ID0+IHtcclxuICAgIGNvbnN0IGEgPSAoKSA9PiBjZi5zcmNFeHBDb25zdE55KF9zcmMpLnNvcnQoZnVuTm1DbXByKVxyXG4gICAgY29uc3QgYiA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBleHBDb25zdEx5ID0gc3JjX2V4cENvbnN0THkoX3NyYylcclxuICAgICAgICBjb25zdCBleHBDb25zdE55ID0gY2YucGlwZShleHBDb25zdEx5KShjZi5pdHJNYXAobGluX2V4cENvbnN0Tm0pLCBjZi5pdHJSbXZFbXApXHJcbiAgICAgICAgY29uc3QgcGFydDJBeSA9IGNmLml0ck1hcChleHBDb25zdExpbl9mbXRMaW5QYXJ0MikoZXhwQ29uc3RMeSlcclxuICAgICAgICBjb25zdCBleHBDb25zdE55MSA9IGNmLml0ckFsaWduTChleHBDb25zdE55KVxyXG4gICAgICAgIGNvbnN0IGxpbiA9IGkgPT4gZXhwQ29uc3ROeTFbaV0gKyBwYXJ0MkF5W2ldXHJcbiAgICAgICAgY29uc3QgbHkgPSBjZi5pdHJNYXAobGluKShjZi5uSXRyKGV4cENvbnN0TnkubGVuZ3RoKSlcclxuICAgICAgICByZXR1cm4gbHkuc29ydChmdW5ObUNtcHIpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWVcclxuICAgICAgICA/IGEoKVxyXG4gICAgICAgIDogYigpXHJcbn1cclxuLy8heSA9PT09PT09PT09PT09PT09PT09PVxyXG5leHBvcnQgY29uc3QgeUFsaV9pc0x2bElObSA9IChfbHZsSTogbikgPT4gKF90c3RGdW5ObTogbm0pOiBiID0+IHtcclxuICAgIGNvbnN0IG5tID0gY2Yuc1JtdlBmeCgndHN0X18nKShfdHN0RnVuTm0pXHJcbiAgICBjb25zdCBsdmxJID0gZnVuTm1fbHZsTm8obm0pXHJcbiAgICBjb25zdCB6ID0gbHZsSSA9PT0gX2x2bElcclxuICAgIHJldHVybiB6XHJcbn1cclxuZXhwb3J0IGNvbnN0IHlBbF9sdmxJTnkgPSAobHZsSTogbiwgbnk6IG55KTogbnkgPT4gY2YuaXRyV2hlcmUoeUFsaV9pc0x2bElObShsdmxJKSkobnkpLnNvcnQoKVxyXG4iXX0=